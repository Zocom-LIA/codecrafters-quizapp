# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: quizapp
# "service" is the name of this project. This will also be added to your AWS resource names.
service: codecrafters

provider:
  # for locally we will use dev once we finish and deploy we can change it to aws and add iamRoleStatements
  name: aws
  runtime: python3.12
  region: eu-north-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:eu-north-1:*:table/*'

plugins:
  # To install this serverless plugin install -n serverless-offline, and then you can run locally using serverless offline (you need to install serverless@3)
  - serverless-offline

functions:
  seedData:
    handler: seed.seed_data
    events:
      - http:
          path: seed
          method: post


    # User CRUD

  # User CRUD
  createUser:
    handler: user.create_user
    events:
      - http:
          path: user
          method: post

  getUserById:
    handler: user.get_user_by_id
    events:
      - http:
          path: user/{userId}
          method: get

  getAllUsers:
    handler: user.get_all_users
    events:
      - http:
          path: user
          method: get

  updateUser:
    handler: user.update_user
    events:
      - http:
          path: user/{userId}
          method: put

  deleteUser:
    handler: user.delete_user
    events:
      - http:
          path: user/{userId}
          method: delete

  # Quiz CRUD
  createQuiz:
    handler: quiz.create_quiz
    events:
      - http:
          path: quiz
          method: post

  getQuizById:
    handler: quiz.get_quiz_by_id
    events:
      - http:
          path: quiz/{quizId}
          method: get

  getAllQuizzes:
    handler: quiz.get_all_quizzes
    events:
      - http:
          path: quiz
          method: get

  updateQuiz:
    handler: quiz.update_quiz
    events:
      - http:
          path: quiz/{quizId}
          method: put

  deleteQuiz:
    handler: quiz.delete_quiz
    events:
      - http:
          path: quiz/{quizId}
          method: delete

  # Question CRUD
  createQuestion:
    handler: question.create_question
    events:
      - http:
          path: quiz/{quizId}/question
          method: post

  getQuestionsByQuiz:
    handler: question.get_questions_by_quiz
    events:
      - http:
          path: quiz/{quizId}/questions
          method: get

  updateQuestion:
    handler: question.update_question
    events:
      - http:
          path: quiz/{quizId}/question/{questionId}
          method: put

  deleteQuestion:
    handler: question.delete_question
    events:
      - http:
          path: quiz/{quizId}/question/{questionId}
          method: delete

resources:
  Resources:
    QuizTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: QuizTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S # Partition Key (Primary Key)
          - AttributeName: SK
            AttributeType: S # Sort Key
        KeySchema:
          - AttributeName: PK
            KeyType: HASH # Partition Key
          - AttributeName: SK
            KeyType: RANGE # Sort Key
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        # Enable Point-in-time Recovery for safety (Optional)
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        # Table-level Encryption (Optional)
        SSESpecification:
          SSEEnabled: true
