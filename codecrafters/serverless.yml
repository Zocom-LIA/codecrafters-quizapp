# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: quizapp
# "service" is the name of this project. This will also be added to your AWS resource names.
service: codecrafters
provider:
  # for locally we will use dev once we finish and deploy we can change it to aws and add iamRoleStatements
  name: aws
  runtime: python3.12
  region: eu-north-1
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:eu-north-1:*:table/*'
plugins:
  - serverless-offline
  - serverless-s3-sync

# Use a separate environment for offline (local) vs. dev
environment:
  BASE_URL: ${self:custom.baseUrls.${self:provider.stage}}

custom:
  baseUrls:
    local: http://localhost:3000  # for serverless-offline
    dev: https://lx31hr5mn2.execute-api.eu-north-1.amazonaws.com  # dev base URL
  s3Sync:
    - bucketName: ${self:service}-${opt:stage, self:provider.stage}-website # e.g. codecrafters-dev-website
      localDir: ../frontend # Our local static files directory (e.g., public or dist)
      bucketPrefix: '' # We leave blank to sync at the root of the bucket


functions:
  seedData:
    handler: seed.seed_data
    events:
      - http:
          path: seed
          method: post

  # User CRUD
  createUser:
    handler: user.create_user
    events:
      - http:
          path: user
          method: post

  getUserById:
    handler: user.get_user_by_id
    events:
      - http:
          path: user/{userId}
          method: get

  getAllUsers:
    handler: user.get_all_users
    events:
      - http:
          path: user
          method: get

  updateUser:
    handler: user.update_user
    events:
      - http:
          path: user/{userId}
          method: put

  deleteUser:
    handler: user.delete_user
    events:
      - http:
          path: user/{userId}
          method: delete

  createUserAttempt:
    handler: user.create_user_attempt
    events:
      - http:
          path: userattempts
          method: post

  getUserAttempt:
    handler: user.get_user_attempt
    events:
      - http:
          path: userattempts/{userId}/{quizId}/{attemptId}
          method: get

  updateUserAttempt:
    handler: user.update_user_attempt
    events:
      - http:
          path: userattempts/{userId}/{quizId}/{attemptId}
          method: put
  
  createUserAnswer:
    handler: user.create_user_answer
    events:
      - http:
          path: useranswers
          method: post

  getUserAnswers:
    handler: user.get_user_answers
    events:
      - http:
          path: useranswers/{userId}/{quizId}/{attemptId}
          method: get

  # Quiz CRUD
  createQuiz:
    handler: quiz.create_quiz
    events:
      - http:
          path: quiz
          method: post

  getQuizById:
    handler: quiz.get_quiz_by_id
    events:
      - http:
          path: quiz/{quizId}
          method: get

  getAllQuizzes:
    handler: quiz.get_all_quizzes
    events:
      - http:
          path: quiz
          method: get

  updateQuiz:
    handler: quiz.update_quiz
    events:
      - http:
          path: quiz/{quizId}
          method: put

  deleteQuiz:
    handler: quiz.delete_quiz
    events:
      - http:
          path: quiz/{quizId}
          method: delete

  # Question CRUD
  createQuestion:
    handler: question.create_question
    events:
      - http:
          path: quiz/{quizId}/question
          method: post

  getQuestionsByQuiz:
    handler: question.get_questions_by_quiz
    events:
      - http:
          path: quiz/{quizId}/questions
          method: get

  updateQuestion:
    handler: question.update_question
    events:
      - http:
          path: quiz/{quizId}/question/{questionId}
          method: put

  deleteQuestion:
    handler: question.delete_question
    events:
      - http:
          path: quiz/{quizId}/question/{questionId}
          method: delete
resources:
  Resources:
    QuizTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: QuizTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S # Partition Key (Primary Key)
          - AttributeName: SK
            AttributeType: S # Sort Key
        KeySchema:
          - AttributeName: PK
            KeyType: HASH # Partition Key
          - AttributeName: SK
            KeyType: RANGE # Sort Key
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        # Enable Point-in-time Recovery for safety (Optional)
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        # Table-level Encryption (Optional)
        SSESpecification:
          SSEEnabled: true

    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${opt:stage, self:provider.stage}-website
        WebsiteConfiguration:
          IndexDocument: homepage.html
          ErrorDocument: error.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-website/*'


  Outputs:
      WebsiteURL:
        Value:
          Fn::GetAtt: [WebsiteBucket, WebsiteURL]
        Description: URL of the static website
